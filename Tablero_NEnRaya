
package proyectonenraya;

public class Tablero 
{
    // atributos
    private char[][]arrayTablero;
    
    // constructor
    public Tablero(char[][] arrayTablero) 
    {
        this.arrayTablero = arrayTablero;
    }
    
        // MÉTODOS
    
    // método para colocar la ficha
    public void colocarFicha()
    {
        // variables
        boolean valido= false;
        
        // - - -
        
    }
    
    // método para crear el tablero
    public void crearTablero(char simbolo)
    {
        for (int i = 0; i < arrayTablero.length; i++) 
        {
            for (int j = 0; j < arrayTablero.length; j++)
            {
              arrayTablero[i][j] = simbolo;
            }
        }
    }
    
    // método para mostrar el tablero
    public void mostrarTablero(char[][]arrayTablero)
    {
        for(int i=0;i<arrayTablero.length;i++)
        {
            for(int j=0;j<arrayTablero[0].length;j++)
            {
                System.out.print(arrayTablero[i][j]+" ");
            }
            System.out.println("");
        }
    }
    
    // método para verificar si el juego tiene que terminar
    public void verificarFinalizacion()
    {
        
    }
    
        // métodos que complementan el método anterior:
    
    // método para comprobar fila
    private char comprobarFila(char[][] arrayTablero, char simboloDef)
    {
        // variables
        char simbolo;
        boolean coincidencia;
        // - - -
        
                for (int i = 0; i < arrayTablero.length; i++) 
                {
                    coincidencia = true;
                    
                    // cogemos el simbolo correspondiente de la fila
                    simbolo = arrayTablero[i][0];
                    
                        // comparamos los símbolos
                        if (simbolo != simboloDef) 
                        {
                            for (int j = 1; j < arrayTablero[0].length; j++) 
                            {
                                // si NO coincide ya NO hay ganador en esta fila
                                if (simbolo != arrayTablero[i][j]) 
                                {
                                    coincidencia = false;
                                }
                            }
                            
                            // si coincide la línea, devuelve el símbolo ganador
                            if (coincidencia) 
                            {
                                return simbolo;
                            }
                        }
                }
        // si no hay ganador, devuelve el símbolo por defecto
        return simboloDef;
    }
    
    // método para comprobar columna
    private char comprobarColumna(char[][] arrayTablero, char simboloDef)
    {
        // variables
         char simbolo;
         boolean coincidencia;
         // - - -

                for (int j = 0; j < arrayTablero.length; j++) 
                {
                    coincidencia = true;
                    
                    // cogemos el simbolo correspondiente de la columna
                    simbolo = arrayTablero[0][j];
                    
                    // comparamos los símbolos
                    if (simbolo != simboloDef) 
                    {
                        for (int i = 1; i < arrayTablero[0].length; i++) 
                        {
                            // si NO coincide ya NO hay ganador en esta columna
                            if (simbolo != arrayTablero[i][j]) 
                            {
                                coincidencia = false;
                            }
                        }
                        // si coincide la columna, devuelve el símbolo ganador
                        if (coincidencia) 
                        {
                            return simbolo;
                        }
                    }
                }
        // si no hay ganador, devuelve el simbolo por defecto
        return simboloDef;
    }
    
    // método para comprobar diagonal principal
    private char comprobarDiagonal(char[][] arrayTablero, char simboloDef)
    {
        // variables
        char simbolo;
        boolean coincidencia= true;
        // - - -
                    // cogemos el simbolo correspondiente
                    simbolo = arrayTablero[0][0];
                    // comparamos los símbolos
                    if (simbolo != simboloDef) 
                    {
                        for (int i = 1; i < arrayTablero.length; i++) 
                        {
                            // si NO coincide ya NO hay ganador
                            if (simbolo != arrayTablero[i][i]) 
                            {
                                coincidencia = false;
                            }
                        }
                        // si coincide, devuelve el símbolo ganador
                        if (coincidencia) 
                        {
                            return simbolo;
                        }
                    }
        // si no hay ganador, devuelve el simbolo por defecto
        return simboloDef;
    }
    
    // método para comprobar diagonal inversa
    private char comprobarDiagonalInversa(char[][] arrayTablero, char simboloDef)
    {
        // variables
         char simbolo;
         boolean coincidencia= true;
         // - - -
                    // cogemos el simbolo correspondiente
                    simbolo = arrayTablero[0][2];
                    // comparamos los símbolos
                    if (simbolo != simboloDef) 
                    {
                        for (int i = 1, j = 1; i < arrayTablero.length; i++, j--) 
                        {
                            // si NO coincide ya NO hay ganador
                            if (simbolo != arrayTablero[i][j]) 
                            {
                                coincidencia = false;
                            }
                        }

                        // si coincide, devuelve el símbolo ganador
                        if (coincidencia) 
                        {
                            return simbolo;
                        }
                    }
        // si no hay ganador, devuelve el simbolo por defecto
        return simboloDef;
    }
    
    // método para comprobar si hay empate
    private void comprobarEmpate()
    {
        
    }
    
}
