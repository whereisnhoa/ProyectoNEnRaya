
package proyectonenraya;

//importar scanner
import java.util.Scanner;

public class Tablero 
{
    //SCANNER "LEER"
    static Scanner leer= new Scanner(System.in);
    
    // atributos
    private char[][]arrayTablero;
    // - - -
    
    // constructor
    public Tablero(char[][] arrayTablero) 
    {
        this.arrayTablero = arrayTablero;
    }
    
        // MÉTODOS
    
    // método para colocar la ficha (TERMINAR)
    public void colocarFicha(char ficha)
    {
        // variables
        boolean valido= false;
        // - - -
        
        while(valido) // mientras la posicion no sea valida
        {
            System.out.println("Introduce la fila:");
            int fila= leer.nextInt();
            System.out.println("Introduce la columna:");
            int columna= leer.nextInt();
            
             if(fila >=0 && fila<arrayTablero.length && columna>=0 && columna<arrayTablero.length && arrayTablero[fila][columna] != ficha)
             {
                 // si la posición es válida y no está ocupada, inserta la ficha.
                 arrayTablero[fila][columna] = ficha;
                 valido= !valido; /// posicion valida
                    
             }else{
                    // si la posición no es válida o está ocupada, no inserta la ficha.
                    System.out.println("La posición no es correcta, vuelve a intentarlo.");
                  }
        }
    }
    
    // método para crear el tablero
    public void crearTablero()
    {
        char simboloDef= '-';
        
        // pedir la longitud del tablero
        System.out.print("Introduce la longitud del tablero:");
        int param= leer.nextInt();
        arrayTablero= new char[param][param];
        
        // crear tablero
        for (int i = 0; i < arrayTablero.length; i++) 
        {
            for (int j = 0; j < arrayTablero.length; j++)
            {
              arrayTablero[i][j] = simboloDef;
            }
        }
    }
    
    // método para mostrar el tablero
     public void mostrarTablero()
     {
        for(int i=0;i<arrayTablero.length;i++)
        {
            for(int j=0;j<arrayTablero[0].length;j++)
            {
                System.out.print(arrayTablero[i][j]+" ");
            }
            System.out.println("");
        }
     }
    
    // método para verificar si el juego tiene que terminar
    public boolean verificarFinalizacion()
    {
        char simboloDef= '-';
        
        if (comprobarEmpate()|| comprobarFila() != simboloDef|| comprobarColumna() != simboloDef|| comprobarDiagonal() != simboloDef || comprobarDiagonalInversa()!= simboloDef) 
               {
                   System.out.println("La partida ha terminado.");
                   return true; // terminado
               }
               return false; // no terminado
    }
    
        // métodos que complementan el método anterior:
    
    // método para comprobar fila
    private char comprobarFila()
    {
        // variables
        char ficha;
        char simboloDef= '-';
        boolean coincidencia;
        // - - -
        
                for (int i = 0; i < arrayTablero.length; i++) 
                {
                    coincidencia = true;
                    
                    // cogemos el simbolo correspondiente de la fila
                    ficha = arrayTablero[i][0];
                    
                        // comparamos los símbolos
                        if (ficha != simboloDef) 
                        {
                            for (int j = 1; j < arrayTablero[0].length; j++) 
                            {
                                // si NO coincide ya NO hay ganador en esta fila
                                if (ficha != arrayTablero[i][j]) 
                                {
                                    coincidencia = !coincidencia;
                                }
                            }
                            
                            // si coincide la línea, devuelve el símbolo ganador
                            if (coincidencia) 
                            {
                                return ficha;
                            }
                        }
                }
                
        // si no hay ganador, devuelve el símbolo por defecto
        return simboloDef;
    }
    
    // método para comprobar columna
    private char comprobarColumna()
    {
        // variables
         char ficha;
         char simboloDef= '-';
         boolean coincidencia;
         // - - -

                for (int j = 0; j < arrayTablero.length; j++) 
                {
                    coincidencia = true;
                    
                    // cogemos el simbolo correspondiente de la columna
                    ficha = arrayTablero[0][j];
                    
                    // comparamos los símbolos
                    if (ficha != simboloDef) 
                    {
                        for (int i = 1; i < arrayTablero[0].length; i++) 
                        {
                            // si NO coincide ya NO hay ganador en esta columna
                            if (ficha != arrayTablero[i][j]) 
                            {
                                coincidencia = !coincidencia;
                            }
                        }
                        // si coincide la columna, devuelve el símbolo ganador
                        if (coincidencia) 
                        {
                            return ficha;
                        }
                    }
                }
                
        // si no hay ganador, devuelve el simbolo por defecto
        return simboloDef;
    }
    
    // método para comprobar diagonal principal
    private char comprobarDiagonal()
    {
        // variables
        char ficha;
        char simboloDef= '-';
        boolean coincidencia= true;
        // - - -
                    // cogemos el simbolo correspondiente
                    ficha = arrayTablero[0][0];
                    // comparamos los símbolos
                    if (ficha != simboloDef) 
                    {
                        for (int i = 1; i < arrayTablero.length; i++) 
                        {
                            // si NO coincide ya NO hay ganador
                            if (ficha != arrayTablero[i][i]) 
                            {
                                coincidencia = !coincidencia;
                            }
                        }
                        // si coincide, devuelve el símbolo ganador
                        if (coincidencia) 
                        {
                            return ficha;
                        }
                    }
                    
        // si no hay ganador, devuelve el simbolo por defecto
        return simboloDef;
    }
    
    // método para comprobar diagonal inversa
    private char comprobarDiagonalInversa()
    {
        // variables
         char ficha;
         char simboloDef= '-';
         boolean coincidencia= true;
         // - - -
                    // cogemos el simbolo correspondiente
                    ficha = arrayTablero[0][2];
                    // comparamos los símbolos
                    if (ficha != simboloDef) 
                    {
                        for (int i = 1, j = 1; i < arrayTablero.length; i++, j--) 
                        {
                            // si NO coincide ya NO hay ganador
                            if (ficha != arrayTablero[i][j]) 
                            {
                                coincidencia = !coincidencia; 
                            }
                        }

                        // si coincide, devuelve el símbolo ganador
                        if (coincidencia) 
                        {
                            return ficha;
                        }
                    }
        // si no hay ganador, devuelve el simbolo por defecto
        return simboloDef;
    }
    
    // método para comprobar si hay empate
    private boolean comprobarEmpate()
    {
        boolean empate = true;
        
        for (int i = 0; i < 3; i++) 
        {
            for (int j = 0; j < 3; j++) 
            {
                if (arrayTablero[i][j] == '-') 
                {
                    return false; // Todavía hay celdas vacías
                }
            }
        }
        
        return true;
    }
    
}
